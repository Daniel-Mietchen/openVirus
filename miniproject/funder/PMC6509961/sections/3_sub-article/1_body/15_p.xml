<?xml version="1.0" encoding="UTF-8"?>
<p> Comment 32: 
 <list list-type="bullet">
  <list-item>
   <p>“The weekly incidence stratified by hospitals is computed by running the function incidence() on the 
    <underline>D</underline>ate vari­able dat1$date_of_onset with the arguments interval = 7 and groups = dat1$hospital." - Consider rephrasing. For instance: “the epicurve with the weekly number of cases by hospital can be computed from the line listing dataframe object (dat1) using the function incidence() on i) the date vari­able (dat1$date_of_onset), ii) by specifying the argument interval of seven days in order to aggregate the number case per week (interval = 7) and iii) including a the line-listing variable for stratification in the argument groups, in this case the hospital name (groups = dat1$hospital).
   </p>
  </list-item>
 </list> Comment 33: 
 <list list-type="bullet">
  <list-item>
   <p>“Here 
    <underline>$</underline>count is a matrix with 56 rows and 6 columns as groups by hospital” - Missing s at the end of $counts.
   </p>
  </list-item>
 </list> Comment 34: 
 <list list-type="bullet">
  <list-item>
   <p>“The generic plot() method for incidence objects calls the specific function plot.incidence(), which makes an incidence barplot using the 
    <italic>ggplot2 </italic>package. Hence, customization of 
    <italic>incidence </italic>plot can benefit from the powerful graphical language from 
    <italic>ggplot2</italic>.” - A short explanation and command line to explain how to access the code of the method would be welcome (notably the plot). This would help users to understand which ggplot2 geometric object(s) is used for the bar plot and incidence_fit lines. This would be an asset to understand how to proceed with further customization (within the aesthetic, theme or faceting specifications). This can be proposed at the end through several examples.
   </p>
  </list-item>
 </list> Comment 35: 
 <list list-type="bullet">
  <list-item>
   <p># plot incidence object</p>
   <p> my_theme &lt;-theme_bw(base_size = 12) +</p>
   <p> theme(panel.grid.minor = element_blank()) +</p>
   <p> theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, color = "black")) plot(i.7.group, border = "white") + my_theme + theme(legend.position = c(0.8, 0.75))</p>
  </list-item>
 </list> The current example assumes that all users are familiar with ggplot2, notably how to customize the non-data components through the theme. We might suggest to introduce what is a theme in ggplot2 and what it does, for instance “Themes allows modification (content and layouts) of non-data components such as titles, axis labels, legends (position and aspect …), graphics grid lines and backgrounds (Modify components of a theme; ref: 
 <ext-link ext-link-type="uri" xlink:href="https://ggplot2.tidyverse.org/reference/theme.html" xmlns:xlink="http://www.w3.org/1999/xlink">https://ggplot2.tidyverse.org/reference/theme.html</ext-link>)”.
</p>
