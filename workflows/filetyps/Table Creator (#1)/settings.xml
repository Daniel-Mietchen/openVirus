<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<config key="rowIndices">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xint" value="0"/>
</config>
<config key="columnIndices">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xint" value="0"/>
</config>
<config key="values">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="&lt;tbody&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BinaryField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Binary data.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BoolField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Contains either true or false. Values of &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, or &lt;code&gt;T&lt;/code&gt; in the first character are interpreted as &lt;code&gt;true&lt;/code&gt;. Any other values in the first character are interpreted as &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CollationField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Supports Unicode collation for sorting and range queries. The ICUCollationField is a better choice if you can use ICU4J. See the section &lt;a href=&quot;language-analysis.html#unicode-collation&quot;&gt;Unicode Collation&lt;/a&gt; for more information.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CurrencyField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use CurrencyFieldType instead.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CurrencyFieldType&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Supports currencies and exchange rates. See the section &lt;a href=&quot;working-with-currencies-and-exchange-rates.html#working-with-currencies-and-exchange-rates&quot;&gt;Working with Currencies and Exchange Rates&lt;/a&gt; for more information.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DateRangeField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Supports indexing date ranges, to include point in time date instances as well (single-millisecond durations). See the section &lt;a href=&quot;working-with-dates.html#working-with-dates&quot;&gt;Working with Dates&lt;/a&gt; for more detail on using this field type. Consider using this field type even if it&amp;#8217;s just for date instances, particularly when the queries typically fall on UTC year/month/day/hour, etc., boundaries.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DatePointField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Date field. Represents a point in time with millisecond precision, encoded using a &quot;Dimensional Points&quot; based data structure that allows for very efficient searches for specific values, or ranges of values. See the section &lt;a href=&quot;working-with-dates.html#working-with-dates&quot;&gt;Working with Dates&lt;/a&gt; for more details on the supported syntax. For single valued fields, &lt;code&gt;docValues=&quot;true&quot;&lt;/code&gt; must be used to enable sorting.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DoublePointField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Double field (64-bit IEEE floating point). This class encodes double values using a &quot;Dimensional Points&quot; based data structure that allows for very efficient searches for specific values, or ranges of values. For single valued fields, &lt;code&gt;docValues=&quot;true&quot;&lt;/code&gt; must be used to enable sorting.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ExternalFileField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Pulls values from a file on disk. See the section &lt;a href=&quot;working-with-external-files-and-processes.html#working-with-external-files-and-processes&quot;&gt;Working with External Files and Processes&lt;/a&gt; for more information.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;EnumField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use EnumFieldType instead.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;EnumFieldType&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Allows defining an enumerated set of values which may not be easily sorted by either alphabetic or numeric order (such as a list of severities, for example). This field type takes a configuration file, which lists the proper order of the field values. See the section &lt;a href=&quot;working-with-enum-fields.html#working-with-enum-fields&quot;&gt;Working with Enum Fields&lt;/a&gt; for more information.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;FloatPointField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Floating point field (32-bit IEEE floating point). This class encodes float values using a &quot;Dimensional Points&quot; based data structure that allows for very efficient searches for specific values, or ranges of values. For single valued fields, &lt;code&gt;docValues=&quot;true&quot;&lt;/code&gt; must be used to enable sorting.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ICUCollationField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Supports Unicode collation for sorting and range queries. See the section &lt;a href=&quot;language-analysis.html#unicode-collation&quot;&gt;Unicode Collation&lt;/a&gt; for more information.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;IntPointField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Integer field (32-bit signed integer). This class encodes int values using a &quot;Dimensional Points&quot; based data structure that allows for very efficient searches for specific values, or ranges of values. For single valued fields, &lt;code&gt;docValues=&quot;true&quot;&lt;/code&gt; must be used to enable sorting.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LatLonPointSpatialField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;A latitude/longitude coordinate pair; possibly multi-valued for multiple points. Usually it&amp;#8217;s specified as &quot;lat,lon&quot; order with a comma. See the section &lt;a href=&quot;spatial-search.html#spatial-search&quot;&gt;Spatial Search&lt;/a&gt; for more information.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LatLonType&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Consider using the LatLonPointSpatialField instead. A single-valued latitude/longitude coordinate pair. Usually it&amp;#8217;s specified as &quot;lat,lon&quot; order with a comma. See the section &lt;a href=&quot;spatial-search.html#spatial-search&quot;&gt;Spatial Search&lt;/a&gt; for more information.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LongPointField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Long field (64-bit signed integer). This class encodes foo values using a &quot;Dimensional Points&quot; based data structure that allows for very efficient searches for specific values, or ranges of values. For single valued fields, &lt;code&gt;docValues=&quot;true&quot;&lt;/code&gt; must be used to enable sorting.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;PointType&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;A single-valued n-dimensional point. It&amp;#8217;s both for sorting spatial data that is &lt;em&gt;not&lt;/em&gt; lat-lon, and for some more rare use-cases. (NOTE: this is &lt;em&gt;not&lt;/em&gt; related to the &quot;Point&quot; based numeric fields). See &lt;a href=&quot;spatial-search.html#spatial-search&quot;&gt;Spatial Search&lt;/a&gt; for more information.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;PreAnalyzedField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Provides a way to send to Solr serialized token streams, optionally with independent stored values of a field, and have this information stored and indexed without any additional text processing. &lt;/p&gt;&lt;p class=&quot;tableblock&quot;&gt;Configuration and usage of PreAnalyzedField is documented in the section  &lt;a href=&quot;working-with-external-files-and-processes.html#the-preanalyzedfield-type&quot;&gt;Working with External Files and Processes&lt;/a&gt;.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RandomSortField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Does not contain a value. Queries that sort on this field type will return results in random order. Use a dynamic field to use this feature.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SpatialRecursivePrefixTreeFieldType&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;(RPT for short) Accepts latitude comma longitude strings or other shapes in WKT format. See &lt;a href=&quot;spatial-search.html#spatial-search&quot;&gt;Spatial Search&lt;/a&gt; for more information.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;StrField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;String (UTF-8 encoded string or Unicode). Strings are intended for small fields and are &lt;em&gt;not&lt;/em&gt; tokenized or analyzed in any way. They have a hard limit of slightly less than 32K.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TextField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Text, usually multiple words or tokens.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TrieDateField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use DatePointField instead.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TrieDoubleField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use DoublePointField instead.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TrieFloatField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use FloatPointField instead.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TrieIntField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use IntPointField instead.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TrieLongField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. Use LongPointField instead.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TrieField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;. This field takes a &lt;code&gt;type&lt;/code&gt; parameter to define the specific class of Trie* field to use; Use an appropriate Point Field type instead.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;UUIDField&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Universally Unique Identifier (UUID). Pass in a value of &lt;code&gt;NEW&lt;/code&gt; and Solr will create a new UUID. &lt;/p&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Note&lt;/strong&gt;: configuring a UUIDField instance with a default value of &lt;code&gt;NEW&lt;/code&gt; is not advisable for most users when using SolrCloud (and not possible if the UUID value is configured as the unique key field) since the result will be that each replica of each document will get a unique UUID value. Using UUIDUpdateProcessorFactory to generate UUID values when documents are added is recommended instead.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;"/>
</config>
<entry key="rowIdPrefix" type="xstring" value="Row"/>
<entry key="rowIdSuffix" type="xstring" value=""/>
<entry key="rowIdStartValue" type="xint" value="0"/>
<entry key="highlightOutputTable" type="xboolean" value="false"/>
<config key="columnProperties">
<config key="0">
<entry key="UserSetValues" type="xboolean" value="true"/>
<entry key="MissValuePattern" type="xstring" value=""/>
<entry key="FormatParameter" type="xstring" isnull="true" value=""/>
<entry key="ReadPossValsFromFile" type="xboolean" value="false"/>
<entry key="SkipThisColumn" type="xboolean" value="false"/>
<entry key="ColumnName" type="xstring" value="xml"/>
<config key="ColumnClass">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
</config>
</config>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.base.node.io.tablecreator.TableCreator2NodeFactory"/>
<entry key="node-name" type="xstring" value="Table Creator"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Base Nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.base"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="4.1.2.v202003032313"/>
<entry key="node-feature-name" type="xstring" value="KNIME Core"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.base.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="4.1.2.v202003050920"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Table Creator"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 1, Cols: 1"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="7090fe0c-e5be-41f8-ae5a-a34ab0df6eb5"/>
</config>
</config>
